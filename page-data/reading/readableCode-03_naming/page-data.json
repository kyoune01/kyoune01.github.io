{"componentChunkName":"component---src-templates-reading-template-js","path":"/reading/readableCode-03_naming","result":{"data":{"markdownRemark":{"html":"<h2>命名</h2>\n<p>リーダブルコードの目的である</p>\n<p><strong>HTML・コードは他の人が最短時間で理解できるように書かなければならない</strong></p>\n<p>を達成するために、コードの「命名」について説明していきます</p>\n<h2>明確な名前を選ぶ</h2>\n<p>まず変数を命名するときに皆さんは何を基準に命名するでしょうか？<br>\n一番多いパターンは機能で命名することでしょうか？</p>\n<pre><code>getParam(t)\n.alignRight\n</code></pre>\n<p>ここで質問です<br>\n上記から要素の横幅を取得する関数とテキストを右寄せするクラス名だと判断できましたか？</p>\n<p>エスパーでない人のために、名前に対してさらにヒントを増やします</p>\n<pre><code>getElementWidth(target)\n.text-alignRight\n</code></pre>\n<p>これなら名前をみただけで役割を察することのできる情報量になりました</p>\n<p>命名をするときに大事なことは、<strong>役割を一目で明確に把握できること</strong>、です<br>\n短く不明瞭な命名より、冗長でも明確な命名を意識してください</p>\n<p>命名するときは日本語ではなく英単語で命名します<br>\nまた名前の中で一番重要な単語を先頭に置きます</p>\n<p>変数：体言止め<br>\n「天気の情報 = weatherData」<br>\n「要素の横幅 = width(Element)」</p>\n<p>関数：動詞を先頭におく<br>\n「天気の情報を取得する = fetchWeather()」<br>\n「CSV 用に受け取った値を整形する = formatForCSV()」</p>\n<p>設問：適切な命名をしてください</p>\n<ol>\n<li>クリックされたときにナビゲーションを表示する関数</li>\n<li>コンテンツを非表示にする関数</li>\n<li>要素から飛び出る長さのテキストを空白で改行する汎用クラス</li>\n</ol>\n<h2>省略しない</h2>\n<p>業務でクラス名・関数を命名する必要がありました</p>\n<pre><code>カレンダー要素のインナークラス\n要素を角丸にするクラス\n天気の情報を取得する関数\n</code></pre>\n<p>しかしタイプを面倒くさがったあなたは下記のように省略をした命名をしました<br>\n名前だけで役割を判断できる命名ができているでしょうか</p>\n<pre><code class=\"language-CSS\">.clI { ... }\n.bd-r { ... }\n</code></pre>\n<pre><code class=\"language-JavaScript\">const getTmpVal = function (a) {\n    // body...\n    return r;\n}\n</code></pre>\n<p>「他人も理解できるだろう」といった傲慢な姿勢で命名し、数秒を面倒くさがった結果、自分は理解できてても他人にはまったく意味の分からない名前になりました</p>\n<p>他人が理解できない命名は、今後保守をする全ての人の時間と脳のリソースを占領する負債です<br>\n基本的に、<strong>命名を省略してはいけません</strong><br>\n※判例として省略されている名前など一部の例外は存在します</p>\n<h2>抽象的な名前より具体的な名前を使う</h2>\n<p>ここまでの資料を読むと当然、（自分の命名は他人から分かりやすい命名ができているだろうか？）のような疑問がわきます<br>\n自分の命名に不安を感じたとき、命名に慣れるまでの間は下記を意識してみてください</p>\n<ul>\n<li>実装を始める前に、代わりとなる単語がないか他の候補を探す</li>\n<li>get, value, param など、汎用的な名前だけの命名を避ける</li>\n<li>動作、対象、単位など、これでもかと情報を詰め込む</li>\n<li>定数、グローバル変数、イレテーターなど、扱いの違いでフォーマットを統一する</li>\n</ul>\n<p>設問：下記の関数名や引数、返り値を適切な命名へ修正しなさい</p>\n<pre><code class=\"language-JavaScript\">/**\n * 天気の情報を取得する関数\n * @param  {strign} 情報を取得したいエリアID\n * @return {array}  取得結果\n */\nconst getTmpVal = function (a) {\n    // body...\n    return r;\n}\n</code></pre>\n<h2>一対一対応な命名</h2>\n<p>最後に「命名」と「美しさ」の複合として、一対一対応な名前を説明します</p>\n<p>対象を表示する関数と非表示にする関数を実装しました</p>\n<pre><code>hiddenTarget() / enableTarget()\n</code></pre>\n<p>ところで「美しさ」の資料では「一貫性と意味のある並び」について説明しました。上記を考慮すると関数名も「on/off の一対一対応している」命名が美しくなります<br>\n「美しさ」の資料に則って命名すると下記のようになります</p>\n<pre><code>hiddenTarget() / showTarget()\ndisableTarget() / enableTarget()\n</code></pre>\n<p>役割が対応する機能を実装するときは、名前も対応しているか意識してください。また相反だけでなく、「first / last」など終始がわかる命名も「美しい」命名です</p>\n<p>設問：下記の命名に対応する名前(対義語)を考えてください</p>\n<ul>\n<li>rangefirst</li>\n<li>beginEvent()</li>\n<li>.btn-show</li>\n</ul>\n<h2>まとめ</h2>\n<p>命名は読みやすさに大きく影響する要素です<br>\n負債を生まない・増やさないよう、下記を意識して大事に命名してください</p>\n<ul>\n<li>役割を他の人が理解できる情報量か</li>\n<li>異なる解釈をされない単語を選べているか</li>\n<li>一貫性を持って書かれているか</li>\n<li>対応する命名ができているか</li>\n</ul>\n<p>日本語から命名を考えてくれるサービス（<a href=\"https://codic.jp/\">codic</a>）も存在します<br>\n命名について悩んだときは周りの人に相談してみましょう</p>","frontmatter":{"date":"2000-01-03","title":"readableCode-命名"}}},"pageContext":{"slug":"/reading/readableCode-03_naming"}},"staticQueryHashes":["3649515864","63159454"]}