{"componentChunkName":"component---src-templates-reading-template-js","path":"/reading/readableCode-04_comment","result":{"data":{"markdownRemark":{"html":"<h2>コメント</h2>\n<p>リーダブルコードの目的である</p>\n<p><strong>HTML・コードは他の人が最短時間で理解できるように書かなければならない</strong></p>\n<p>を達成するために、コードの「コメント」について説明していきます</p>\n<h2>自分の考えを残す</h2>\n<p>まず初めにこのような勘違いをしている人は正直に手を上げてください</p>\n<blockquote>\n<p>優秀なコードとはコードだけで全て理解できるものである</p>\n</blockquote>\n<p>この考え方は傲慢で間違った考え方です</p>\n<p>下記の例では、コメントがなくても定数 MAX_COUNT に 10 が入っていることは分かります。</p>\n<pre><code class=\"language-JavaScript\">// MAX_COUNTに10を設定する\nconst MAX_COUNT = 10\n</code></pre>\n<p>適切にコメントを残すことで、そのコードを用いて<br>\nあなたが何がしたかったのか／何故そのコードを書いたのかを伝えられます</p>\n<pre><code class=\"language-JavaScript\">// 処理を停止するカウント上限\nconst MAX_COUNT = 10\n</code></pre>\n<p>繰り返しになりますが、<br>\n<strong>自分が何のためにコードを書いているのか、何故そのようなコードになったのか</strong><br>\n説明するためにコメントを書くべきです</p>\n<h2>コメントすべきではないことを知る</h2>\n<p>上記のコード例では、わざわざコメントすべきではない例を指摘することで、「コードを読めばわかるコメントを残す必要はない」ことを含んでいます</p>\n<p>同様にコメントとして適切でないコメントはいくつか存在します</p>\n<ul>\n<li>コードを読めばわかるコメント</li>\n<li>曖昧な言葉を多用したコメント</li>\n<li>失敗した命名を埋め合わせるだけのコメント</li>\n</ul>\n<p>設問：上記例から 1 つ選び、コードと共にダメなコメントを答えてください。さらにダメなコメントを改善したコメントを答えてください</p>\n<h2>読み手の立場になる</h2>\n<p>上記のコメントすべきでない例を見て具体的に想像できたでしょうか？<br>\nすべき／すべきでないコメントの基準として大事な点は、コメントを残す人間が<strong>読み手の立場になっているか</strong>です</p>\n<p>あなたが既存コードを修正する必要があったとき、下記のコメントは作業の助けになるでしょうか？</p>\n<pre><code class=\"language-JavaScript\">// ガードする\nif($(this).find(\">ul\").length==0) return;\n</code></pre>\n<p>下記のようなコメントであれば嬉しいのではないでしょうか？</p>\n<pre><code class=\"language-JavaScript\">// 子階層がなければページ遷移させる\nif($(this).find(\">ul\").length==0) return;\n</code></pre>\n<p>コメントはそのコードを読む他人のために残します<br>\n<strong>HTML・コードは他の人が最短時間で理解できるように書かなければならない</strong><br>\nために何を残すべきかを考えてみましょう</p>\n<h2>コメントは簡潔に</h2>\n<p>ここまでコメントを残す状況や考え方についてまとめてきました</p>\n<p>まとめを読んでコメントを残す癖がついてきたあなたは、次に「沢山考えを詰め込むとコメントが長くなってしまった。仕方のないことなのかな？」といった疑問に直面することになるでしょう</p>\n<pre><code class=\"language-JavaScript\">// 数値の平均を計算して結果を返す関数\n// 共通化できそうだったので共通化した\n// でも呼んでる場所は一箇所\n// ちくわ大明神\n// 引数は配列であることを期待してる\nconst calculateAverage = function (arrayNum) {\n    // body...\n}\n</code></pre>\n<p>他人のために残すため、コメントはどうしても長くなる状況があります。しかしできる限り、冗長なコメントではなく簡潔で分かりやすいコメントを残せる方が「美しい」です</p>\n<pre><code class=\"language-JavaScript\">// 渡された配列の平均を取って返す\n// 配列を引数にとり、中身はint型とする\nconst calculateAverage = function (arrayNum) {\n    // body...\n}\n</code></pre>\n<p>また、</p>\n<pre><code class=\"language-JavaScript\">// 速度向上のためにこの時点でデータを取得することがあるので一時的に保存する\n// ↓\n// キャッシュする\n</code></pre>\n<p>などのような専門用語での言い換えを用いることで、短く簡潔に残すだけでなく、認識のズレを防ぐ「美しい」コメントを残すこともできます</p>\n<h2>コメントのフォーマット</h2>\n<p>JavaScript には、大人数が関わる案件や個人間の揺れがないコメントを残すため<br>\n「<a href=\"https://www38.atwiki.jp/aias-jsstyleguide2/pages/14.html\">JSDoc</a>」というフォーマットが存在します</p>\n<pre><code class=\"language-JavaScript\">/**\n * 配列の平均を返す\n * @param  {array} arrayNum Numberを格納した配列\n *     例： [1, 3, 2, ..., (Number)]\n * @return {Number} 計算結果を返す（整数でないことがある）\n */\nconst calculateAverage = function (arrayNum) {\n    /**\n     * 配列の合計値\n     * @type {Number}\n     */\n    let sum = 0;\n\n    /**\n     * 配列内の要素の個数\n     * @type {Number}\n     */\n    const count = arrayNum.length;\n\n    /**\n     * 配列を一つずつ取り出し足し合わせる\n     * @param  {Number} elm 配列内の数値\n     */\n    arrayNum.forEach(function(elm) {\n        sum += elm;\n    });\n\n    return sum/count;\n}\n</code></pre>\n<p>またコードに対してだけでなく、ファイルに対してコメントを残すこともあります</p>\n<pre><code class=\"language-css\">/********************************\n * 共通モジュール用 CSS\n *******************************/\n\n/********************************\n *   1. base\n *   2. header\n *   3. footer\n *   4. 汎用\n *       4-1. フォント\n *       4-2. 背景色\n *       4-3. 余白\n *   5. レイアウト\n *   ...\n *******************************/\n</code></pre>\n<p>コメントとは結局「他人が処理を理解するための補助」として存在します。コメントにも規約を決め「一貫性を持って」コメントを残すことが重要です</p>\n<p>設問：下記の関数に JSDoc のフォーマットでコメントしてください</p>\n<pre><code class=\"language-JavaScript\">const sumCount = function (num1=0, num2=0) {\n    const sum = num1 + num2;\n    return sum;\n};\n</code></pre>\n<h2>コメントを書く練習</h2>\n<p>ここまでコメントを残す意味やテクニックの話をしてきました。しかし中には「コメントを残すのは恥ずかしい…」「これまで書いてこなかったから書き方が分からない」といった人がいるかと思います</p>\n<p>そんな人にコメントを残す習慣をつける、オススメの方法があります</p>\n<ol>\n<li>思ったとおりにコメントをそのまま書く</li>\n<li>一晩寝かせて深みをもたせる</li>\n<li>きれいなことばに置き換える</li>\n</ol>\n<p>ことです</p>\n<p>もし、コードを書いていて（ここの処理で文字列を渡されるとやばいな）と思うコードがあるとしましょう<br>\nまずは思ったことをそのままコメントに残していきます</p>\n<pre><code class=\"language-JavaScript\">// この関数に文字列を渡すとやばい\n</code></pre>\n<p>一度書き殴ってから、きれいな言葉にします<br>\n（このときにすぐ書き換えることが難しければ、一晩置くことで書き換えた言葉に深みが出ます）</p>\n<pre><code class=\"language-JavaScript\">// 注意：引数がint以外は処理できない\n// TODO: ガード処理を入れる\n</code></pre>\n<p>結果、2 行になりましたが現状と課題が見ただけで理解できるコメントになりました</p>\n<p>一回で良いコメントを書こうとせず、まずは思ったことをそのまま書いても大丈夫です<br>\nまずはコメントを書く習慣を身に付けることが重要です</p>\n<h2>まとめ</h2>\n<p>コメントに限った話ではないですが、技術の習得は手を動かすしかありません。他人のためのコードが残せるように沢山コメントを書きましょう</p>\n<p>ただし最後に一つだけ注意することがあります<br>\n<strong>「ファイルに残したそのコメント、全世界に公開されてますよ？」</strong></p>","frontmatter":{"date":"2000-01-04","title":"readableCode-コメント"}}},"pageContext":{"slug":"/reading/readableCode-04_comment"}}}