{"componentChunkName":"component---src-templates-reading-template-js","path":"/reading/readableCode-Ex_myThought","result":{"data":{"markdownRemark":{"html":"<h2>概要</h2>\n<p>リーダブルコードの資料内で問いかけた設問に対する自分の考えです<br>\n考え方が間違っていたり一般的でない考え方をしていると思ったときは是非反応をください</p>\n<h2>README</h2>\n<h3>設問：あなたはどちらのコードがより優れていると思いますか？</h3>\n<p>まず、どちらが優れているか絶対の解は存在しません（コードの美しさ参考）<br>\nそのうえでどちらが良いかを述べます</p>\n<p>コードを読む場合など、人間が覚えておける瞬間記憶の量には限界があります<br>\nそのため一瞬一瞬で脳内に記憶する要素が少ない程理解しやすいコードだと考えます</p>\n<p>設問のコード内で認識する必要がある要素は<br>\n・三項演算子は「判定」「処理 A」「処理 B」の 1 行に 3 つ<br>\n・if 文は 1 行目で「判定」、2 行目で「処理 A」（存在すれば 3 行目に「処理 B」）の各行に 1 つずつ<br>\nです<br>\n今回の例では脳のリソースが少ない、後者の「if 文」が良い書き方であると考えます</p>\n<p>※上記の理由から三項演算子は「脳のリソースを多く使う、使い方を限定すべき」書き方だと考えています</p>\n<h2>美しさ</h2>\n<h3>設問：適切な改行・インデントを入れることで視認性をあげてください</h3>\n<pre><code class=\"language-HTML\">&#x3C;ul>\n    &#x3C;li>\n        &#x3C;h4>結月ゆかり&#x3C;/h4>\n        &#x3C;p>AHS社商標登録商品である&#x3C;/p>\n        &#x3C;b>ボイスロイド&#x3C;/b>\n        &#x3C;b>ボーカロイド&#x3C;/b>\n        &#x3C;p>です。&#x3C;/p>\n    &#x3C;/li>\n    &#x3C;li>\n        &#x3C;h4>輿水幸子&#x3C;/h4>\n        &#x3C;p>自信満々で、自分が一番可愛いと信じて一直線に生きている女の子です。&#x3C;/p>\n    &#x3C;/li>\n    &#x3C;li>\n        &#x3C;h4>UNISON SQUARE GARDEN&#x3C;/h4>\n        &#x3C;p>メンバー自身が誰よりも音楽を楽しんでいるバンドです。&#x3C;/p>\n    &#x3C;/li>\n&#x3C;/ul>\n</code></pre>\n<h3>設問：下記の CSS を「段落」と「意味のある並び」をもたせて書き直しなさい</h3>\n<pre><code class=\"language-CSS\">.btn_wrap {\n    display: flex;\n    width: 700px;\n}\n.btn {\n    width: 300px;\n    height: 100px;\n    backglound-color: white; /* 初期設定 */\n}\n.btn-blue {\n    backglound-color: green;\n}\n.btn-green {\n    backglound-color: green;\n}\n.btn_text {\n    font-size: 1.2em;\n    margin-bottom: 0px;\n}\n</code></pre>\n<h3>設問：あなたはインデントを修正しますか？混在したまま書きますか？</h3>\n<blockquote>\n<p>コーディングは、「正しく書く」よりも「一貫性を持って書く」方が重要です。</p>\n</blockquote>\n<p>上記より、インデントを踏襲してコーディングする<br>\n（もし余裕があればコーディングガイドラインを確認し、確認者に確認を取ってから修正する）</p>\n<h2>思いやり</h2>\n<h3>設問：タブ機能を実装した JavaScript をリファクタリングしてください</h3>\n<pre><code class=\"language-JavaScript\">/**\n * タブがクリックされたとき対応するコンテンツを開くイベント\n * @param  {context} currentTab eventを発火したタブ自身\n * @param  {string}  targetID   開くコンテンツのid\n */\nconst openTab = function (currentTab, targetID) {\n    // クリックされたときに開いているタブとコンテンツは一度全て閉じる\n    delteAllClass('.tabs', 'js-openTab');\n    delteAllClass('.content', 'js-openContent');\n\n    // クリックされたタブのコンテンツを開く\n    const targetContent = document.getElementById(targetID);\n    targetContent.classList.add('js-openContent');\n    currentTab.classList.add('js-openTab');\n};\n\n/**\n * 指定された要素が渡されたクラス名を保持している場合削除する\n * @param  {string} selectorName\n * @param  {string} delClassName\n */\nconst delteAllClass = function (selectorName, delClassName) {\n    const targets = document.querySelectorAll(selectorName);\n    targets.forEach((target) => {\n        target.classList.remove(delClassName);\n    });\n};\n</code></pre>\n<h2>命名</h2>\n<h3>設問：適切な命名をしてください</h3>\n<ol>\n<li>showNavigation()</li>\n<li>addClassName(target, className)</li>\n<li>.text-preWrap</li>\n</ol>\n<p>※「クリックされた」はただの発火タイミング。関数名（関数内の処理）に影響しないため、関数名には不適切</p>\n<h3>設問：下記の関数名や引数、返り値を適切な命名へ修正しなさい</h3>\n<pre><code class=\"language-JavaScript\">/**\n * 天気の情報を取得する関数\n * @param  {strign} 情報を取得したいエリアID\n * @return {array}  取得結果\n */\nconst fetchWeatherData = function (areaID) {\n    // body...\n    return fetchData;\n}\n</code></pre>\n<h3>設問：下記の命名に対応する名前を考えてください</h3>\n<ul>\n<li>rangeEnd</li>\n<li>endEvent()</li>\n<li>.btn-hidden</li>\n</ul>\n<h2>コメント</h2>\n<h3>設問：上記例から 1 つ選び、コードと共にダメなコメントを答えてください。さらにダメなコメントを改善したコメントを答えてください</h3>\n<p>提出コードのコメントを読み、修正後が改善されているか確認する</p>\n<h3>設問：下記の関数に JSDoc のフォーマットでコメントしてください</h3>\n<pre><code class=\"language-JavaScript\">/**\n * 渡された数値を足した結果を返す関数\n * @param  {Number} num1\n * @param  {Number} num2\n * @return {Number} sum\n */\nconst sumCount = function (num1=0, num2=0) {\n    /**\n     * 引数を足した数\n     * ※引数の型チェックを行わないため、Stringsが渡された場合はStringsになる\n     */\n    const sum = num1 + num2;\n\n    return sum;\n};\n</code></pre>\n<h2>ロジック</h2>\n<h3>設問：if 文を並び替えてください</h3>\n<pre><code class=\"language-JavaScript\">if (/* よくあるケースA */) {\n    // メイン処理\n} else if (/* よくあるケースB */) {\n    // 軽い処理B\n} else if (/* 特殊ケース */) {\n    // 軽い処理A\n} else if (/* 特殊ケース */) {\n    // 長い処理\n    // 長い処理\n    // 長い処理\n}\n</code></pre>\n<h3>設問：リファクタリングしてください</h3>\n<pre><code class=\"language-JavaScript\">const data = [14,21,73,43,9,45];\nconst count = data.lenght;\nconst now = new Date();\nconst today = now.getDate();\nlet num = [];\n\nfor (var i = 0; i &#x3C; count; i++) {\n    if ((data[i] > 31) &#x26;&#x26; (data[i] &#x3C; today)) {\n        continue;\n    }\n    num.push(data[i]);\n}\n</code></pre>","frontmatter":{"date":"2000-01-10","title":"readableCode-自分の考え方"}}},"pageContext":{"slug":"/reading/readableCode-Ex_myThought"}}}