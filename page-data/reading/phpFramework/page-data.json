{"componentChunkName":"component---src-templates-reading-template-js","path":"/reading/phpFramework","result":{"data":{"markdownRemark":{"html":"<h2>フレームワーク一覧</h2>\n<ul>\n<li>Laravel</li>\n<li>cakephp</li>\n<li>codeigniter</li>\n<li>Symfony</li>\n<li>Smarty</li>\n</ul>\n<h3>参考</h3>\n<ul>\n<li><a href=\"https://crieit.net/posts/CakePHP-Laravel-2018\">CakePHP と Laravel の比較 2018</a></li>\n<li><a href=\"https://www.sejuku.net/blog/4016\">【徹底比較】2019 年版 PHP フレームワークおすすめランキング TOP5</a></li>\n</ul>\n<h2>Laravel</h2>\n<p><a href=\"https://laravel.com/\">公式 HP</a></p>\n<ul>\n<li>超有名＋開発が楽しい FW</li>\n<li>ディレクトリが煩雑で散らばってるイメージ</li>\n<li>デフォルトで Vue が入ってるなど、フロント側との連携がしやすい</li>\n<li>cake の Bake 的な artisan</li>\n<li>view は Blade、Validation は Controller に書く</li>\n</ul>\n<p>デフォルト</p>\n<pre><code>Laravel/\n    ├── app/\n    │   ├── Http/\n    │   │   ├── Controller/ // コントローラ\n    │   │   └── Middleware/ // ミドルウェア\n    │   └── models/         // モデル\n    ├── config/             // DB、appなど各種設定\n    ├── datebase/\n    │   ├── migrations/     // テーブルを簡単につくれる\n    │   └── seeds/          // テーブルに値を簡単に入れられる\n    ├── resources/\n    │   ├── assets/         // sassやSPA-Vueなどサーバ側で動作するリソース\n    │   │   ├── sass/\n    │   │   └── js/\n    │   └── views/          // ビュー\n    ├── routes/\n    │   ├── web.php         // ページ用ルーティング\n    │   └── api.php         // API用ルーティング\n    └── tests/              // テスト置き場\n</code></pre>\n<h2>cakephp</h2>\n<p><a href=\"https://cakephp.org/jp\">公式 HP</a></p>\n<ul>\n<li>\n<p>綺麗な MVC 規約、規約がすべて</p>\n<ul>\n<li>Model、View、Controller、役割が全てディレクトリ名なので初心者がとっつきやすい（と思う）</li>\n</ul>\n</li>\n<li>使用感は他 FW（Laravel）と同じ</li>\n<li>Vue などの連携がない</li>\n<li>Bake コマンドで各ファイルを生成できる</li>\n<li>routing ファイルが 1 つなので API と分けたいときにめんどくさいかも</li>\n<li>「AppController.php」など全ての役割毎に継承元の「App」ファイルが存在する</li>\n</ul>\n<p>デフォルト</p>\n<pre><code>cakephp/\n    ├── config/\n    │   ├── app.php         // FWの全体設定\n    │   ├── env.php         // 環境設定\n    │   └── routes.php      // ルーティング\n    ├── pulgins/\n    ├── tests/              // テスト置き場\n    ├── tmp/\n    │   └── cache/          // キャッシュ置き場\n    ├── logs/\n    │   ├── debag.log       // デバッグ出力先\n    │   └── error.log       // エラー出力先\n    └── src/\n        ├── Controller/     // コントローラ、ページのメイン処理\n        │   └── Component/  // コントローラの共通処理置き場\n        ├── Model/          // モデル\n        │   ├── Behavior/   // ビヘイビア\n        │   ├── Entity/     // DBとやり取りするために条件を整理する場\n        │   └── Table/      // DBと直接やり取りする場\n        ├── Template/       // コントローラに対応した実際のビュー置き場\n        └── View/           // ヘッダーなど共通化できるパーツ置き場\n            └── Helper/     // ヘルパー\n</code></pre>\n<p>デフォルトの構成に追加した層</p>\n<pre><code>cakephp/\n    ├── config/\n    │   └── routes_api.php  // API用ルーティング\n    │                               通常のルーティングと分ける\n    ├── Service/            // 各コントローラから処理を分離したメソッド置き場\n    │                               処理を分離してFatControllerを防ぐ\n    └── src/\n        └── Model/\n            └── Validate/   // 共通バリデーションルール置き場\n</code></pre>\n<p>何も知らなくても最低限抑えるべき場所</p>\n<pre><code>cakephp/\n    ├── config/\n    │   ├── app.php         // FWの全体設定\n    │   ├── env.php         // 環境設定\n    │   └── routes.php      // ルーティング\n    ├── tmp/\n    │   └── cache/          // とりあえずキャッシュ削除して再読込\n    ├── logs/\n    │   └── error.log       // エラー内容が書かれてる\n    └── src/\n        ├── Controller/     // ルーティング情報からここを探す\n        ├── Model/\n        │   └── Table/      // DBのテーブル情報\n        └── Template/       // ブラウザで表示される内容はここ\n</code></pre>\n<h2>codeigniter</h2>\n<p><a href=\"https://www.codeigniter.com/\">公式 HP</a></p>\n<ul>\n<li>パフォーマンスが良い、ただし FW の恩恵は少ない</li>\n<li>コア部分の処理が追いやすい</li>\n<li>記事は 2015 ～ 2017 年までの記事が多い印象</li>\n<li>composer 対応</li>\n</ul>\n<p>デフォルト（composer kenjis 使用）</p>\n<pre><code>codeigniter/\n    ├── bin(system)/        // コアファイル\n    └── application/\n        ├── config/         // 各設定\n        │   └── routes.php  // ルーティング\n        ├── controllers/    // コントローラ\n        ├── models/         // モデル\n        └── views/          // ビュー\n</code></pre>\n<h2>Symfony</h2>\n<p><a href=\"https://symfony.com/legacy\">公式 HP</a></p>\n<ul>\n<li>ドメイン駆動設計を推奨（model がない）</li>\n<li>サーバインストールで動く、ファイル納品だけでは動かない？</li>\n</ul>\n<blockquote>\n<p>比較的規模の大きな Web サービスが Symfony で作られています<br>\nアプリケーションを開発する上で開発と保守を効率化することを目的とし</p>\n</blockquote>\n<p>らしい</p>\n<h2>Smarty</h2>\n<p><a href=\"https://www.smarty.net/docsv2/ja/\">公式 HP</a></p>\n<ul>\n<li>HTML テンプレートを使用していた時代に主流だった</li>\n<li>PHP4 から対応</li>\n<li>composer 未対応</li>\n<li>いま新規フレームワークとして選ぶ理由は何もない</li>\n<li>ロジックとビューに分け、ロジック部分をキャッシュとして吐き出すため高速に読み込みができた</li>\n</ul>","frontmatter":{"date":"2003-01-00","title":"phpFramework"}}},"pageContext":{"slug":"/reading/phpFramework"}}}