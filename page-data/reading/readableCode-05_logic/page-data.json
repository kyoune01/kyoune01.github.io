{"componentChunkName":"component---src-templates-reading-template-js","path":"/reading/readableCode-05_logic","result":{"data":{"markdownRemark":{"html":"<h2>ロジック</h2>\n<p>リーダブルコードの目的である</p>\n<p><strong>HTML・コードは他の人が最短時間で理解できるように書かなければならない</strong></p>\n<p>を達成するために、コードの「ロジック」について説明していきます</p>\n<p>※ロジックは各段落の内容が独立し、JavaScript の内容がメインになっています</p>\n<h2>処理の並び順</h2>\n<p>さて問題です。下記の並び順はどちらが読みやすいでしょうか？</p>\n<pre><code class=\"language-JavaScript\">if (count &#x3C; 10) {}\n</code></pre>\n<pre><code class=\"language-JavaScript\">if (10 > count) {}\n</code></pre>\n<p>どちらも同じ意味ですが、おそらく前者が読みやすいと思います。これは「10 がカウントより大きければ」より「カウントが 10 以下ならば」のテキストが日本語としてより自然であるからです。</p>\n<p>「カウントが 10 以下ならば」の書き方は「ヨーダ法」と呼ばれる書き方ですが、現在は一般的に前者の読みやすい書き方が「自然」で良いとされています</p>\n<p>上記に似た問題として「三項演算子」の可否もよく問題に上がります<br>\n三項演算子は行数を短くすることよりも、他人が理解するのに必要な時間が短くなることを意識して使用するか判断してください</p>\n<p>また、if/else 文を書くときは最も一般的（処理回数が多い・処理が軽い・判定が早い・意味順）な処理を最初に判定・処理することで、コード全体を理解する時間を短縮し実行速度が早くする考え方が存在します</p>\n<p>設問：if 文を並び替えてください</p>\n<pre><code class=\"language-JavaScript\">if (/* 特殊ケース */) {\n    // 長い処理\n    // 長い処理\n    // 長い処理\n} else if (/* 上記と同じ頻度の特殊ケース */) {\n    // 軽い処理A\n} else if (/* よくあるケースA */) {\n    // メイン処理\n} else if (/* よくあるケースB */) {\n    // 軽い処理B\n}\n</code></pre>\n<h2>ネストを浅くする</h2>\n<p>次の問題です。下記の並び順はどちらが読みやすいでしょうか？</p>\n<pre><code class=\"language-JavaScript\">const A = getValue(a);\nif (A &#x3C; 100) {\n    const B = getValue(b);\n    if (B > 30) {\n        if ((A + B) &#x3C; 100) {\n            return (A + B);\n        }\n    }\n}\n\nreturn 0;\n</code></pre>\n<pre><code class=\"language-JavaScript\">const A = getValue(a);\nconst B = getValue(b);\n\nif ((A >= 100) || (B &#x3C; 30) || ((A + B) > 100)){\n    return 0;\n}\n\nreturn (A + B);\n</code></pre>\n<p>今回も結果は同じですが、前者より後者が簡単そうに見えますよね？</p>\n<p>前者のコードではネストのスペースに最大 12 字も使用しています。今の主流のコーディング規約では 1 行あたり 80 ～ 120 文字とされていますが、文字数の 1/10 を使用しており完全に無駄ですね</p>\n<p>ネストが深くなるのは初期構築のときだけでなく、寧ろ運用で「既存コードに新しく判定を追加したい」「一行 if 文を入れるだけで簡単だから」という場面でよく起きます</p>\n<p>人間が知覚できる文字数を最大限に使用するために、if 文であれば「早期ガード」の書き方があります。メインの処理に入る前に return させることで、メインの処理を守り処理を高速化しネストを浅くできる、コードを書くうえで必須の書き方です</p>\n<p>ネストの深さは罪の深さです。ネストが深くなりすぎたときはコードを見直してみましょう</p>\n<h2>説明変数／要約変数</h2>\n<p>ここからは見づらく大きくなりすぎたコードを短く、簡潔に書くテクニックを記載します<br>\n下記の式を見やすくするにはどうすればいいでしょうか？</p>\n<pre><code class=\"language-JavaScript\">if (text.indexOf('hoge') !== appearPosition) {}\n</code></pre>\n<p>if 文の中に判定が入っているため「if 文であること」「中身の判定」を同時に解釈する必要があります\n上記のような場合は「要約変数」を使い、解釈する内容を 1 行ずつに分解します</p>\n<pre><code class=\"language-JavaScript\">const isHoge = (text.indexOf('hoge') !== appearPosition);\nif (isHoge) {}\n</code></pre>\n<p>式の右辺が定数の場合は、「説明変数」を用いて下記のように書けます</p>\n<pre><code class=\"language-JavaScript\">const resulut = text.indexOf('hoge');\nif (resulut !== -1) {}\n</code></pre>\n<p>if 文の判定が複雑になるほど、変数への置き換えが重要になっていきます。また「この判定を後で使うよ」と読む人間へ事前に伝えることができます</p>\n<h2>変数を削除する</h2>\n<p>式を変数で分割することでコードを読みやすくする方法を紹介しました。しかし変数が多すぎると逆に読みづらくなるため、使うべきでない場合があります</p>\n<ul>\n<li>複雑な式を分解していない</li>\n<li>変数にしなくても明確</li>\n<li>一度しか使われず重複コードの削除に貢献していない</li>\n<li>直接結果を利用すれば簡潔に書ける</li>\n</ul>\n<p>できるだけコードは短いほうが良いです。短く書いた上で説明のために変数へ処理を分割するとキレイなコードになります</p>\n<h2>変数のスコープを縮める</h2>\n<p>短くコードを書く際に、できるだけ変数を使い回せるようにグローバルスコープの変数を作る人もいます</p>\n<pre><code class=\"language-JavaScript\">count = 0;\nconst fun1 = function () {\n    // 処理\n    for (i = 10 - 1; i >= 0; i--) {\n        count++;\n    }\n}\nfun1();\n\nconsole.log(count)\n// 10 ←！？\nconsole.log(i)\n// -1 ←！？？？\n</code></pre>\n<p>もしスコープを意識せずにロジックを書けば、意図せずに変数の混ざり合いが生じてバグの温床になります<br>\n（また、明らかな目的がない限り、グローバル変数は宣言してはいけません）<br>\nそのために、変数宣言 var / let / const はスコープを意識して正しく使いましょう</p>\n<p>正しく使いましょうと言われても具体的なイメージができない人は「全ての変数を const で書く」書き方ができるかチャレンジしてみましょう。無駄な一時変数を減らし、要所だけを可変変数にすることでスコープを意識した書き方ができます。</p>\n<p>設問：下記のコードをリファクタリングしてください</p>\n<pre><code class=\"language-JavaScript\">data = [14,21,73,43,9,45];\ntoday = new Date();\nnum = [];\n\nfor (i = 0; i &#x3C; data.length; i++) {\n    if (data[i] &#x3C; 31) {\n        if (today.getDate() &#x3C; data[i]) {\n            num.push(data[i]);\n        }\n    }\n}\n</code></pre>\n<h2>汎用コードを沢山つくる</h2>\n<p>怠惰なエンジニアの美徳として、「一度書いたコードを二度と書かない」ことがよく上げられます。処理を汎用化して切り出して再利用することで、コードの品質をあげメインの処理に集中することができます<br>\nここで重要な考え方は「思いやり」で説明した「1 度に 1 つのことをする」です</p>\n<h2>まとめ</h2>\n<p>コードを書きプログラムを書く仕事をしていても、キレイなロジックを考えられるかどうかにコーダとエンジニアの違いがあると考えています</p>\n<p>しかし現実には時間をかけられないため泥臭いコードを納品しなければいけない場面が多々あります。しかし普段から「とりあえず動くコードならいいや…」等の考え方をしていると未来に大きな負債を残します<br>\n<strong>どんな時でも余裕を持って優雅たれ</strong> の姿勢でコードを書けるようになりましょう</p>","frontmatter":{"date":"2000-01-05","title":"readableCode-ロジック"}}},"pageContext":{"slug":"/reading/readableCode-05_logic"}}}