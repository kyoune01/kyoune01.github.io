{"componentChunkName":"component---src-templates-reading-template-js","path":"/reading/readableCode-01_beauty/","result":{"data":{"markdownRemark":{"html":"<h2>コードの美しさ</h2>\n<p>リーダブルコードの目的である</p>\n<p><strong>HTML・コードは他の人が最短時間で理解できるように書かなければならない</strong></p>\n<p>を達成するために、コードの「美しさ」について説明していきます</p>\n<h2>なぜ美しさが大事なのか</h2>\n<p>ではさっそく、下記の HTML は修正しやすいでしょうか？<br>\n内部にタブを一つ増やす修正指示を受けたと想定して 3 秒で対応できるか考えてみましょう</p>\n<pre><code class=\"language-HTML\">&#x3C;nav>&#x3C;ul id=\"tab\" class=\"static\">&#x3C;li class=\"tabcon\" id=\"tabcon1s\">&#x3C;p>tab1&#x3C;/p>&#x3C;/li>&#x3C;li class=\"tabcon\" id=\"tabcon2s\">&#x3C;p>tab2&#x3C;/p>&#x3C;/li>&#x3C;/ul>&#x3C;/nav>\n</code></pre>\n<p>「実際の業務ではパーサーを使うので上記のようなコードを直接人間が修正することはない」？<br>\nでは下記のような HTML ではどうでしょうか？</p>\n<pre><code class=\"language-HTML\">&#x3C;nav>&#x3C;ul id=\"tab\" class=\"static\">\n&#x3C;li class=\"tabcon\" id=\"tabcon1s\">\n&#x3C;p>tab1&#x3C;/p>\n&#x3C;/li>\n    　    &#x3C;li class=\"tabcon\" id=\"tabcon2s\">&#x3C;p>tab2\n&#x3C;/p>&#x3C;/li>&#x3C;li class=\"tabcon\" id=\"tabcon3s\">&#x3C;p>tab3&#x3C;/p>&#x3C;/li>\n&#x3C;/ul>&#x3C;/nav>\n</code></pre>\n<p>もし実際の業務で見ることがあれば、頭を抱えたくなる改行とインデントです<br>\nしかし誰しも一度はこのようなレイアウトを見たことがあると思います（ない貴方は幸運です）</p>\n<h3>美しさとは</h3>\n<p>人間はデザインの 4 大原則に基づいたコーディングを無意識のうちに綺麗だと感じます<br>\nHTML・コードを書く際にはデザインの 4 大原則を意識することで綺麗な書き方ができます</p>\n<blockquote>\n<p>デザインの 4 大原則<br>\n・近接　・整列　・強弱　・反復<br>\n<a href=\"https://bulan.co/swings/design4principals/\">https://bulan.co/swings/design4principals/</a></p>\n</blockquote>\n<p>次からは頭を抱えてしまう HTML を副題に沿って読みやすく、美しく修正していきます</p>\n<h2>改行位置とインデント</h2>\n<p>まずは副題に沿って適切な改行を HTML へ与えます</p>\n<pre><code class=\"language-HTML\">&#x3C;nav>\n&#x3C;ul id=\"tab\" class=\"static\">\n&#x3C;li class=\"tabcon\" id=\"tabcon1s\">&#x3C;p>tab1&#x3C;/p>&#x3C;/li>\n&#x3C;li class=\"tabcon\" id=\"tabcon2s\">&#x3C;p>tab2&#x3C;/p>&#x3C;/li>\n&#x3C;li class=\"tabcon\" id=\"tabcon3s\">&#x3C;p>tab3&#x3C;/p>&#x3C;/li>\n&#x3C;/ul>\n&#x3C;/nav>\n</code></pre>\n<p>これだけで十分読みやすくなりましたね<br>\n適切な改行を与え頭を揃えることで意識して読みやすさをあげられます<br>\nここにインデントを加えることでさらに読みやすくしてみましょう</p>\n<pre><code class=\"language-HTML\">&#x3C;nav>\n    &#x3C;ul id=\"tab\">\n        &#x3C;li class=\"tabcon\" id=\"tabcon1s\">&#x3C;p>tab1&#x3C;/p>&#x3C;/li>\n        &#x3C;li class=\"tabcon\" id=\"tabcon2s\">&#x3C;p>tab2&#x3C;/p>&#x3C;/li>\n        &#x3C;li class=\"tabcon\" id=\"tabcon3s\">&#x3C;p>tab3&#x3C;/p>&#x3C;/li>\n    &#x3C;/ul>\n&#x3C;/nav>\n</code></pre>\n<p>十分読みやすくなりました</p>\n<p>では、なぜ改行とインデントを加えることで読みやすいと感じられるのでしょうか<br>\n原理としてはデザイン 4 大原則の下記を用いているからです</p>\n<ul>\n<li>改行を入れることでタグを「整列」する</li>\n<li>インデントをいれることで入れ子であることを「強調」する（仮想の縦線を引く）</li>\n</ul>\n<p>これからはなんとなく改行・インデントを入れるのではなく、読みやすさを意識して HTML・コードを書いてみましょう。</p>\n<p>設問：適切な改行・インデントを入れることで視認性をあげてください</p>\n<pre><code>&#x3C;ul>&#x3C;li>&#x3C;h4>結月ゆかり&#x3C;/h4>&#x3C;p>AHS社商標登録商品である&#x3C;/p>&#x3C;b>ボイスロイド&#x3C;/b>&#x3C;b>ボーカロイド&#x3C;/b>&#x3C;p>です。&#x3C;/p>&#x3C;/li>&#x3C;li>&#x3C;h4>輿水幸子&#x3C;/h4>&#x3C;p>自信満々で、自分が一番可愛いと信じて一直線に生きている女の子です。&#x3C;/p>&#x3C;/li>&#x3C;li>&#x3C;h4>UNISON SQUARE GARDEN&#x3C;/h4>&#x3C;p>メンバー自身が誰よりも音楽を楽しんでいるバンドです。&#x3C;/p>&#x3C;/li>&#x3C;/ul>\n</code></pre>\n<h2>一貫性と意味のある並び</h2>\n<p>下記 HTML にタブで表示／非表示を切り替えるコードをあげます<br>\nJavaScript の処理を一瞬で理解できるでしょうか？</p>\n<pre><code class=\"language-HTML\">&#x3C;ul class=\"btn_wrap\">\n    &#x3C;li class=\"btn btn-blue\">&#x3C;p class=\"btn_text\">tab1&#x3C;/p>&#x3C;/li>\n    &#x3C;li class=\"btn btn-green\">&#x3C;p class=\"btn_text\">tab2&#x3C;/p>&#x3C;/li>\n&#x3C;/ul>\n</code></pre>\n<pre><code class=\"language-JavaScript\">tab1 = document.getElementById('tabcon1s');\ntab1.addEventListener('click',openTab);\ntab3 = document.getElementById('tabcon3s');\ntab2 = document.getElementById('tabcon2s');\ntab2.addEventListener('click',openTab);\ntab3.addEventListener('click',openTab);\n</code></pre>\n<p>上記の JavaScript のコードは「段落」と「意味のある並び」が欠けた状態です。「段落」と「意味のある並び」を与えることでコードの可読性を上げていきます</p>\n<p>まずはコードに「段落」を与えます。「段落」とは、似ている考えを 1 つにまとめて他の考えと分けたものを指します<br>\n（デザイン 4 大原則の「整列」「反復」です）</p>\n<pre><code class=\"language-JavaScript\">tab1 = document.getElementById('tabcon1s');\ntab3 = document.getElementById('tabcon3s');\ntab2 = document.getElementById('tabcon2s');\n\ntab1.addEventListener('click',openTab);\ntab3.addEventListener('click',openTab);\ntab2.addEventListener('click',openTab);\n</code></pre>\n<p>つぎに「意味のある並び」を与えます。「意味のある並び」とは「1,2,3...」や「a,b,c...」などの要素が並んでいるとき、次は ◯◯ が来て欲しいなど、「こうであって欲しい順番」を指します。</p>\n<pre><code class=\"language-JavaScript\">tab1 = document.getElementById('tabcon1s');\ntab2 = document.getElementById('tabcon2s');\ntab3 = document.getElementById('tabcon3s');\n\ntab1.addEventListener('click',openTab);\ntab2.addEventListener('click',openTab);\ntab3.addEventListener('click',openTab);\n</code></pre>\n<p>はじめのコードより理解に必要な時間が大幅に削減することができましたね</p>\n<p>HTML は記載の順で表示の順番が変わるため、コードとは別のルールで記載します<br>\nしかし JavaScript はコードの並び順がバラバラだとしても想定通りに動いてしまうため、長期期間運用されてきたコードでは混沌とすることが多いです</p>\n<p>自分がどの段落を修正すべきか、修正したことで意味の並びが変わらないか意識して修正することが重要です</p>\n<p>設問：下記の CSS を「段落」と「意味のある並び」をもたせて書き直しなさい</p>\n<pre><code class=\"language-HTML\">&#x3C;ul class=\"btn_wrap\">\n    &#x3C;li class=\"btn btn-blue\">&#x3C;p class=\"btn_text\">tab1&#x3C;/p>&#x3C;/li>\n    &#x3C;li class=\"btn btn-green\">&#x3C;p class=\"btn_text\">tab2&#x3C;/p>&#x3C;/li>\n&#x3C;/ul>\n</code></pre>\n<pre><code class=\"language-CSS\">.btn_text {\n    font-size: 1.2em;\n    margin-bottom: 0px;\n}\n.btn {\n    width: 300px;\n    height: 100px;\n    backglound-color: blue;\n}\n.btn-green {\n    width: 300px;\n    height: 100px;\n    backglound-color: green;\n}\n.btn_wrap {\n    display: flex;\n    width: 700px;\n}\n</code></pre>\n<h2>個人的な好みと一貫性・コーディングルール</h2>\n<p>皆さんはどちらの HTML が優れていると思いますか？</p>\n<pre><code class=\"language-HTML\">&#x3C;p>\n    &#x3C;span>tab1&#x3C;/span>\n&#x3C;/p>\n</code></pre>\n<pre><code class=\"language-HTML\">&#x3C;p>&#x3C;span>tab1&#x3C;/span>&#x3C;/p>\n</code></pre>\n<p>もしくは下記のコードの場合、どちらが視認性が良いでしょうか？</p>\n<pre><code class=\"language-JavaScript\">if (isChecked) {\n    return true;\n}\n</code></pre>\n<pre><code class=\"language-JavaScript\">if (isChecked)\n{\n    return true;\n}\n</code></pre>\n<p>結論を述べると、上記に答えは存在しません<br>\nしかし「案件や仕事でどう対応をするべきか」の場合は答えが存在します。</p>\n<ul>\n<li>業務のコーディングガイドラインに従うこと</li>\n<li>（既存のファイルを修正する場合）元々のファイルに揃えること</li>\n</ul>\n<p>です。</p>\n<p>どちらでコーディングを始めてもよいですが、ファイルに異なるルールが存在する場合は間違いなくコードを読む時間が増えます</p>\n<p>コーディングは、「正しく書く」よりも「一貫性を持って書く」方が重要です。</p>\n<p>設問：既存ファイルを修正する際に、「Tab」インデントと「Space」インデントが混在している行を見つけました。あなたはインデントを修正しますか？混在したまま書きますか？</p>\n<h2>まとめ</h2>\n<p>HTML を書く際に美しさを意識することで、理解に必要な時間を削減できる例を記載しました<br>\n実際のコーディングではエディタの補完機能を用いてコーディングしていくと思います</p>\n<p>しかし、コーダ・エンジニアとして生きるために、開発環境の設計などルールを決める場でなぜそのルールが必要なのかについて意識できる、未来の負債にならないような修正方法を意識できるようになってください</p>\n<p>最後に、\n<strong>JavaScript の末尾「;」を付けるか付けないかは必ず統一しなさい</strong></p>","frontmatter":{"date":"2000-01-01","title":"readableCode-コードの美しさ"}}},"pageContext":{"slug":"/reading/readableCode-01_beauty"}},"staticQueryHashes":["3649515864","63159454"],"slicesMap":{}}