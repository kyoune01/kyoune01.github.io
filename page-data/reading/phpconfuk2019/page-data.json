{"componentChunkName":"component---src-templates-reading-template-js","path":"/reading/phpconfuk2019","result":{"data":{"markdownRemark":{"html":"<h2>開催情報</h2>\n<p><a href=\"https://phpcon.fukuoka.jp/2019/\">PHP カンファレンス福岡 2019</a><br>\n2019.6.29(sat) 10:00 - 18:00<br>\n福岡ファッションビル 8 階 A・B・C・D ホール</p>\n<h2>PHP 型検査</h2>\n<p>スライド</p>\n<ul>\n<li>PHP の型検査は難しい</li>\n<li>無理くり型を書くなら書くな</li>\n<li>PHPDoc 書け</li>\n<li>CI で型チェックしたい</li>\n<li>array → string[] 書き方知らなかった</li>\n<li>function X(): void 書き方知らなかった</li>\n<li>スライドをゆっくり拝見したい</li>\n</ul>\n<h2>Monitoring PHP</h2>\n<p><a href=\"https://slide.seike460.com/slides/phpconfuk2019#/\">スライド</a></p>\n<ul>\n<li>守りと攻めのモニタリング → 機会損失を防ぐ意味と次の改善を促す（Google Analytics みたい）</li>\n<li>PHP 側で関係するのは　応答数、メモリ使用量、CPU 使用量　など</li>\n<li>データを pull するか push するか 2 種類の監視方法がある</li>\n<li>モニタリングは思考のレベルが辿り着いてない感があった</li>\n</ul>\n<h2>Web サービスの成長を止めずにリファクタリングする技術</h2>\n<p><a href=\"https://speakerdeck.com/soudai/web-refactoring\">スライド</a></p>\n<ul>\n<li>リファクタリングしてない</li>\n<li>web サービスは稼働と一緒に進化も止めない</li>\n<li>チーズ → 見たくはないがないと困るコード</li>\n<li>腐った牛乳 → コメントアウトされた Cake1 時代のコード（まったく必要ない）</li>\n<li>機能追加＋バグ修正 → 振る舞いが変わる</li>\n<li>最適化＋リファクタリング → 振る舞いが変わらない（多分直近で必要なのはこっち）</li>\n<li>絶対に上記を混ぜた課題を建てない（テストの内容が変わる → テストの内容を絞れる？）</li>\n<li>絶対にゴールを決める</li>\n<li>\n<p>リファクタリング要件</p>\n<ul>\n<li>新機能とコンフリクトしない</li>\n<li>振る舞いを替えない</li>\n<li>サービスを止めない</li>\n<li>新たな負債を作らない</li>\n</ul>\n</li>\n<li>機能が分けられない状態なら分けるのが始めのリファクタリング</li>\n<li>振る舞いを替えない → 振る舞いが変わってないことを証明する</li>\n<li>テストを書け</li>\n<li>「いい方法が浮かばない…」「大きすぎて時間が足りない…」 → リファクタリングしない（大事）</li>\n<li>シナリオテストは最近導入された、ユニットテストはしてない（できる状態じゃない）</li>\n<li>シナリオをいきなり自動化しない（耳が痛い）</li>\n<li>テーブル設計に不具合、どうしようもない</li>\n<li>モデルがおかしい、これは決断がいるけどできたらもっと model がスリムになりそう</li>\n<li>FatController なので Service 層を導入したのは良かった</li>\n<li>状況によるけれど同 FW 内で API を呼ぶ設計なのは冗長すぎる気がする</li>\n<li>View に if 文は沢山書いてきた</li>\n<li>Service 層で View で出力する内容を準備する？ → ここの想像がうまくできない</li>\n<li>一番自分の環境に近い発表で学びが多かった</li>\n</ul>\n<h2>古き良き開発現場に新しい環境を作ろう！</h2>\n<p><a href=\"https://speakerdeck.com/nako0123/lets-create-a-new-culture-in-the-old-development-site\">スライド</a></p>\n<ul>\n<li>まずはドキュメントの整理は自分もやってきた → その後の発言力アップはできてない</li>\n<li>Backlog 優先で処理するって周りの意識作りが成功してるので、その意識作りが気になる</li>\n<li>手順書 → 仮想環境、これは自分の仕事なのでやらないと</li>\n<li>markdown の書き方勉強会したい</li>\n<li>仲間を増やしたい → 時々やる無理しない</li>\n<li>自分も頑張ろうと思える感じの内容だった</li>\n</ul>\n<h2>ユニットテストの現場の問題を原則に立ち返って考える</h2>\n<p><a href=\"https://speakerdeck.com/hgsgtk/think-deep-unit-test-practical-problem\">スライド</a></p>\n<ul>\n<li>ユニットテストをちゃんとしようと思ったところに良い流れでありがたい…</li>\n<li>手動テストと自動化テスト</li>\n<li>ユニットテストによるコスト削減 vs ユニットテストの作成・維持のコスト</li>\n<li>\n<p>テストから一目で理解できなければ負債</p>\n<ul>\n<li>コメントいれよう？</li>\n</ul>\n</li>\n<li>\n<p>ちゃんとお前らエラーハンドリングせんやろ？アサートいらんやろ？（耳が痛い）</p>\n<ul>\n<li>エラーコメントは「 f(x) = y, want z 」の形で出力しろ</li>\n</ul>\n</li>\n<li>実行順序で結果が変わるテスト</li>\n<li>\n<p>追加したらわけわからんところでエラーになるテスト</p>\n<ul>\n<li>ちゃんとグローバルはクリアしろ、フィクスチャレコード（？）を分けるか共通化するかちゃんとしろ</li>\n</ul>\n</li>\n<li>\n<p>内部実装に依存したテスト</p>\n<ul>\n<li>private なのが悪いって言ってたけれどうまく改善方法がわからんかった</li>\n</ul>\n</li>\n<li>Mock 云々は本当に意味が理解できなかった、テストでも状態を変化させろ？</li>\n</ul>\n<h2>クラウド環境化における API リトライ設計</h2>\n<p><a href=\"https://www.slideshare.net/ssuser537eef/api-152529773\">スライド</a></p>\n<ul>\n<li>SPA のリトライ処理は実装しなければ悩まなくていい（？）</li>\n<li>考えないといけない処理だって感じだけれど、その前に SPA の FW 理解からしないと…</li>\n</ul>\n<h2>PHPStan で CustomRule を作る</h2>\n<p><a href=\"https://speakerdeck.com/nazonohito51/make-phpstan-customrule-d596e237-6692-4e6b-b83b-f5fac3618797\">スライド</a></p>\n<ul>\n<li>CI ツール</li>\n<li>個人開発なら PHPStorm、コードの品質保証で CI 仕込むならこっち</li>\n<li>カスタムルールが作れるようになる、というより静的解析ツールが内部でやってることの内容</li>\n<li>PHPStan 完全に理解した</li>\n<li>1 ルール = 1 クラス</li>\n<li>意味分解 → 構文解析 → AST へ変換</li>\n<li>node：クラスやメソッドの宣言文、scope：クラスやメソッドのコンテキスト、broker：外の状況も含めた解析者？</li>\n<li>新規メソッドは戻り値引数の型宣言必須確認ルール欲しい</li>\n<li>ここでもやはり PHPDoc</li>\n</ul>\n<h2>LT</h2>\n<p>いろいろ聞いたけれど理解できない内容と闇が深そうな内容がいくつかあった<br>\n（オレオレパッケージとか）</p>\n<h3>date()とか time()の関数より DateTime クラス使った方が良さそう的な話</h3>\n<p>スライド</p>\n<ul>\n<li>テストをちゃんとしてるならランタイム関数とか使わない当たり前だよなぁ</li>\n<li>Datetime より setNowDate()ができる Carbon</li>\n<li>cakephp では Chronos って名前</li>\n</ul>\n<h3>Stripe+PHP でセキュアで安全な決済機能を作る</h3>\n<p><a href=\"https://speakerdeck.com/gorou_178/stripe-plus-phptesekiyuatean-quan-najue-ji-ji-neng-wozuo-ru\">スライド</a></p>\n<ul>\n<li>\n<p>情報漏えいの原因</p>\n<ul>\n<li>クレジットカード情報を保持（一瞬でも保持しない）</li>\n<li>アプリケーションが脆弱（耳が痛い）</li>\n</ul>\n</li>\n<li>\n<p>情報の非保持化</p>\n<ul>\n<li>通過させない</li>\n<li>保存しない</li>\n<li>処理しない</li>\n</ul>\n</li>\n<li>stripe でかいけつ！</li>\n</ul>\n<h3>知ると得するコマンドライン PHP の便利な使い方</h3>\n<p>スライド</p>\n<ul>\n<li>phpinfo.php は置いたままにしないでください（大事なことなので何度も言いました）</li>\n<li>でもコマンドたたけないなら置くしかない…</li>\n<li>でも php の cli と apache で見てる場所違うことあるよね？</li>\n</ul>","frontmatter":{"date":"2003-02-00","title":"phpconfuk2019"}}},"pageContext":{"slug":"/reading/phpconfuk2019"}},"staticQueryHashes":["3649515864","63159454"]}