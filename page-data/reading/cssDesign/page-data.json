{"componentChunkName":"component---src-templates-reading-template-js","path":"/reading/cssDesign","result":{"data":{"markdownRemark":{"html":"<h2>CSS 設計</h2>\n<ul>\n<li>BEM</li>\n<li>OOCSS</li>\n<li>SMACSS</li>\n<li>FLOCSS\nなど</li>\n</ul>\n<p>設計の選択によってコストや敷居が変わるため、開発の規模感や期間で使い分ける</p>\n<h3>参考</h3>\n<ul>\n<li><a href=\"https://qiita.com/nezurika/items/a964e21d3596b0ee4c9a\">各 CSS 設計手法を取り入れる上でのメリット・デメリットをまとめてみた</a></li>\n<li><a href=\"https://app.codegrid.net/entry/bem-basic-1\">BEM によるフロントエンドの設計 第 1 回 基本概念とルール</a></li>\n<li><a href=\"https://qiita.com/k_mori/items/7d3da61c712ff9513163\">初心者による初心者向けの SMACSS まとめ</a></li>\n<li><a href=\"https://qiita.com/sueshin/items/dcbaf3d8a0adb6b087db\">脱・CSS 無法地帯。FLOCSS で指針のある設計を。</a></li>\n</ul>\n<h2>BEM</h2>\n<ul>\n<li>Block（塊）、Element (要素)、Modifier (修飾) の３つに分ける</li>\n<li>命名規則は.block__element--modifier とする</li>\n<li>シングルクラス</li>\n</ul>\n<p>メモ<br>\n：細かな差分（背景色のみ）などは Modifier で切り替えるが複数差分が存在する場合は、シングルクラスの考え方を優先して Block を分ける<br>\n：ペラ 1 の LP コーディングなど、小規模・短期間開発時に使用</p>\n<h3>コード例</h3>\n<pre><code class=\"language-HTML\">&#x3C;ul class=\"executive\">\n  &#x3C;li class=\"executive__item\">\n    &#x3C;p class=\"executive__item__title\">&#x3C;/p>\n    &#x3C;p class=\"executive__item__text\">&#x3C;/p>\n  &#x3C;/li>\n&#x3C;/ul>\n&#x3C;ul class=\"profile\">\n  &#x3C;li class=\"profile__item\">\n    &#x3C;p class=\"profile__item__title\">&#x3C;/p>\n    &#x3C;p class=\"profile__item__text\">&#x3C;/p>\n  &#x3C;/li>\n  &#x3C;li class=\"profile__item\">\n    &#x3C;p class=\"profile__item__title\">&#x3C;/p>\n    &#x3C;p class=\"profile__item__text\">&#x3C;/p>\n  &#x3C;/li>\n&#x3C;/ul>\n</code></pre>\n<pre><code class=\"language-CSS\">.executive { ... }\n.executive__item { ... }\n.executive__item__title { ... }\n.executive__item__text { ... }\n\n.profile { ... }\n.profile__item { ... }\n.profile__item__title { ... }\n.profile__item__text { ... }\n</code></pre>\n<h2>OOCSS</h2>\n<ul>\n<li>構造とスキン（見た目）を分離する</li>\n<li>オブジェクト指向</li>\n<li>マルチクラス</li>\n</ul>\n<p>メモ<br>\n：役割が一番組みやすい粒度に感じる。他と比べて衝突が発生しやすい<br>\n：コンポーネントリストを作成しないような中規模サイト、中期間開発時に使用</p>\n<h3>コード例</h3>\n<pre><code class=\"language-HTML\">&#x3C;ul class=\"cardWrap\">\n  &#x3C;li class=\"card w100 border-gold\">\n    &#x3C;p class=\"title\">&#x3C;/p>\n    &#x3C;p class=\"text\">&#x3C;/p>\n  &#x3C;/li>\n&#x3C;/ul>\n&#x3C;ul class=\"cardWrap\">\n  &#x3C;li class=\"card\">\n    &#x3C;p class=\"title\">&#x3C;/p>\n    &#x3C;p class=\"text\">&#x3C;/p>\n  &#x3C;/li>\n  &#x3C;li class=\"card\">\n    &#x3C;p class=\"title\">&#x3C;/p>\n    &#x3C;p class=\"text\">&#x3C;/p>\n  &#x3C;/li>\n&#x3C;/ul>\n</code></pre>\n<pre><code class=\"language-CSS\">.cardWrap { ... }\n.cardWrap.large { ... }\n.cardWrap .card { ... }\n.cardWrap .card .title { ... }\n.cardWrap .card .text { ... }\n\n.w100 { ... }\n.border-gold { ... }\n</code></pre>\n<h2>SMACSS</h2>\n<ul>\n<li>base/layout/module/state/theme の 5 つにわける</li>\n<li>layout と state と theme には接頭語をつける</li>\n<li>マルチクラス</li>\n</ul>\n<p>メモ<br>\n：Layouts を分けるため div が増えやすいイメージ。正しいマークアップを望む場合 resetCSS が重要<br>\n：コンポーネントリストを作成する大規模サイト、長期間開発時に使用</p>\n<h3>コード例</h3>\n<pre><code class=\"language-HTML\">&#x3C;div class=\"l-container-12\">\n  &#x3C;div class=\"l-grid-12\">\n    &#x3C;div class=\"card card-executive t-boder-gold\">\n      &#x3C;p class=\"card-title\">&#x3C;/p>\n      &#x3C;p class=\"card-text\">&#x3C;/p>\n    &#x3C;/div>\n  &#x3C;/div>\n&#x3C;/div>\n&#x3C;div class=\"l-container-12\">\n  &#x3C;div class=\"l-grid-06\">\n    &#x3C;div class=\"card\">\n      &#x3C;p class=\"card-title\">&#x3C;/p>\n      &#x3C;p class=\"card-text\">&#x3C;/p>\n    &#x3C;/div>\n  &#x3C;/div>\n  &#x3C;div class=\"l-grid-06\">\n    &#x3C;div class=\"card\">\n      &#x3C;p class=\"card-title\">&#x3C;/p>\n      &#x3C;p class=\"card-text\">&#x3C;/p>\n    &#x3C;/div>\n  &#x3C;/div>\n&#x3C;/div>\n</code></pre>\n<pre><code class=\"language-CSS\">.l-container-12 { ... }\n\n.l-grid-01 { ... }\n.l-grid-02 { ... }\n...\n.l-grid-11 { ... }\n.l-grid-12 { ... }\n\n.t-boder-red { ... }\n.t-boder-gold { ... }\n...\n\n.card { ... }\n.card-executive { ... }\n.card-title { ... }\n.card-text { ... }\n</code></pre>\n<h2>FLOCSS</h2>\n<ul>\n<li>OOCSS, SMACSS, BEM, SuitCSS, MCSS の考え方を取り入れた比較的新しいやつ</li>\n<li>命名規則は BEM</li>\n<li>マルチクラス</li>\n</ul>\n<p>メモ<br>\n：ディレクトリ構成まで考慮した、設計ではなく CSS「運用」のイメージ<br>\n：大規模サイト・長期間開発時かつ Sass を用いる開発で使用</p>\n<h3>コード例</h3>\n<p>SMACSS と大きく変わらないので割愛</p>\n<h3>ディレクトリ例</h3>\n<pre><code>├──foundation/      /* Reset.cssなど土台となるCSS群 */\n├──layout/          /* header, sidebar, footerなどのレイアウト用CSS群 */\n└──object/\n    ├──component/   /* 再利用できる小さなコンポーネントCSS群    例：.btn-text_small {} */\n    ├──project/     /* プロジェクト固有のコンポーネントCSS群    例：.card-title {} */\n    └──utility/     /* ユーティリティクラスを定義するCSS群      例：.u-container {} */\n</code></pre>","frontmatter":{"date":"2001-01-00","title":"cssDesign"}}},"pageContext":{"slug":"/reading/cssDesign"}}}