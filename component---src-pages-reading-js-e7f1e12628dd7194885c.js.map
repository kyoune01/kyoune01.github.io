{"version":3,"sources":["webpack:///./src/components/readingList.js","webpack:///./src/pages/reading.js"],"names":["ReadingList","data","useStaticQuery","errors","allMarkdownRemark","edges","map","node","key","id","style","marginTop","to","frontmatter","slug","title","NoneCount","h1","description","list","AllowCount","Reading","content","totalCount","href","target","rel"],"mappings":"+JA+CeA,EA3CK,WAClB,IAAMC,EAAOC,yBAAe,cAoB5B,IAAID,EAAKE,OAIT,OAAOF,EAAKG,kBAAkBC,MAAMC,KAAI,YAAe,IAAZC,EAAW,EAAXA,KACzC,OACE,yBAAKC,IAAG,GAAKD,EAAKE,GAAMC,MAAO,CAAEC,UAAW,SAC1C,kBAAC,OAAD,CAAMC,GAAE,GAAKL,EAAKM,YAAYC,MAASP,EAAKM,YAAYE,YCxB1DC,EAAY,CAChBC,GAAI,kBACJC,YAAa,aACbC,KAAM,IAGFC,EAAa,CACjBH,GAAI,gBACJC,YAAa,wBACbC,KAAM,kBAAC,EAAD,OA6COE,UA1CC,WACd,IASMC,EADgD,IARzCpB,yBAAe,cAQPE,kBAAkBmB,WACbH,EAAaJ,EAEvC,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKD,MAAM,YACX,4BAAKO,EAAQL,IACb,2BACGK,EAAQJ,YADX,IACwB,6BACtB,0CACA,uBACEM,KAAK,kCACLC,OAAO,SACPC,IAAI,cAHN,QAQDJ,EAAQH","file":"component---src-pages-reading-js-e7f1e12628dd7194885c.js","sourcesContent":["import React from \"react\"\nimport { useStaticQuery, graphql, Link } from \"gatsby\"\nimport PropTypes from \"prop-types\"\n\nconst ReadingList = () => {\n  const data = useStaticQuery(graphql`\n    query {\n      allMarkdownRemark(\n        sort: { order: DESC, fields: [frontmatter___date] }\n        limit: 1000\n      ) {\n        totalCount\n        edges {\n          node {\n            id\n            frontmatter {\n              title\n              slug\n              date\n            }\n          }\n        }\n      }\n    }\n  `)\n  if (data.errors) {\n    return\n  }\n\n  return data.allMarkdownRemark.edges.map(({ node }) => {\n    return (\n      <div key={`${node.id}`} style={{ marginTop: \"1rem\" }}>\n        <Link to={`${node.frontmatter.slug}`}>{node.frontmatter.title}</Link>\n      </div>\n    )\n  })\n}\n\nReadingList.propTypes = {\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      totalCount: PropTypes.number,\n      edges: PropTypes.node,\n    }),\n  }),\n}\n\nexport default ReadingList\n","import React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport PropTypes from \"prop-types\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport ReadingList from \"../components/readingList\"\n\nconst NoneCount = {\n  h1: \"動作チェック完了済。原稿推敲中\",\n  description: \"そのうち公開します。\",\n  list: \"\",\n}\n\nconst AllowCount = {\n  h1: \"Today I Learn\",\n  description: \"学習資料などの用途でまとめた資料一覧です。\",\n  list: <ReadingList />,\n}\n\nconst Reading = () => {\n  const data = useStaticQuery(graphql`\n    query {\n      allMarkdownRemark {\n        totalCount\n      }\n    }\n  `)\n\n  const IsCount = data.allMarkdownRemark.totalCount !== 0\n  const content = IsCount ? AllowCount : NoneCount\n\n  return (\n    <Layout>\n      <SEO title=\"reading\" />\n      <h1>{content.h1}</h1>\n      <p>\n        {content.description} <br />\n        <span>リポジトリ : </span>\n        <a\n          href=\"https://github.com/kyoune01/TIL\"\n          target=\"_blank\"\n          rel=\"noreferrer\"\n        >\n          TIL\n        </a>\n      </p>\n      {content.list}\n    </Layout>\n  )\n}\n\nReading.propTypes = {\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      totalCount: PropTypes.number,\n    }),\n  }),\n  IsCount: PropTypes.bool,\n  content: PropTypes.object,\n}\n\nexport default Reading\n"],"sourceRoot":""}