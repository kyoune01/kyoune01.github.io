{"version":3,"file":"component---src-templates-reading-template-tsx-c3b8587fa75f2661c565.js","mappings":"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","sources":["webpack://portfolio-gatsby/./src/templates/readingTemplate.tsx","webpack://portfolio-gatsby/./src/components/header.js","webpack://portfolio-gatsby/./src/components/nav.js","webpack://portfolio-gatsby/./src/components/layout.js","webpack://portfolio-gatsby/./src/components/seo.js"],"sourcesContent":["import React from \"react\"\nimport { graphql } from \"gatsby\"\nimport { MarkdownRemark } from \"../../types/graphql-types\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\n\nconst Template: React.FC<Props> = ({ data }) => (\n  <Layout>\n    <div className=\"reading-post-container\">\n      <div className=\"reading-post\">\n        <h1 style={{ marginBottom: \"2rem\" }}>{data.markdownRemark?.frontmatter?.title}</h1>\n        <div\n          className=\"reading-post-content\"\n          dangerouslySetInnerHTML={{ __html: data.markdownRemark?.html ?? '' }}\n        />\n      </div>\n    </div>\n  </Layout>\n)\n\ntype Props = {\n  data: {\n    markdownRemark: MarkdownRemark,\n  },\n}\n\nexport default Template\n\nexport const Head: React.FC<Props> = ({ data }) => (\n  <SEO title={data.markdownRemark?.frontmatter?.title} />\n)\n\nexport const query = graphql`\n  query($slug: String!) {\n    markdownRemark(frontmatter: { slug: { eq: $slug } }) {\n      html\n      frontmatter {\n        date\n        title\n      }\n    }\n  }\n`\n","import { Link } from \"gatsby\"\nimport PropTypes from \"prop-types\"\nimport React from \"react\"\n\nconst Header = ({ siteTitle }) => (\n  <header\n    style={{\n      background: `rebeccapurple`,\n      marginBottom: `1.45rem`,\n    }}\n  >\n    <div\n      style={{\n        margin: `0 auto`,\n        maxWidth: 960,\n        padding: `1.45rem 1.0875rem`,\n      }}\n    >\n      <h1 style={{ margin: 0 }}>\n        <Link\n          to=\"/\"\n          style={{\n            color: `white`,\n            textDecoration: `none`,\n          }}\n        >\n          {siteTitle}\n        </Link>\n      </h1>\n    </div>\n  </header>\n)\n\nHeader.propTypes = {\n  siteTitle: PropTypes.string,\n}\n\nHeader.defaultProps = {\n  siteTitle: ``,\n}\n\nexport default Header\n","import React from \"react\"\nimport { Link } from \"gatsby\"\n\nconst Nav = () => (\n  <nav style={{ width: `100%` }}>\n    <ul style={{ display: `flex`, alignItems: `center` }}>\n      <li style={{ listStyle: `none`, width: `25%` }}>\n        <Link to=\"/\">top</Link>\n      </li>\n      <li style={{ listStyle: `none`, width: `25%` }}>\n        <Link to=\"/reading\">読み物</Link>\n      </li>\n    </ul>\n  </nav>\n)\n\nexport default Nav\n","/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nimport Header from \"./header\"\nimport Nav from \"./nav\"\nimport \"./layout.css\"\n\nconst Layout = ({ children }) => {\n  const data = useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `)\n\n  return (\n    <>\n      <Header siteTitle={data.site.siteMetadata.title} />\n      <div\n        style={{\n          margin: `0 auto`,\n          maxWidth: 960,\n          padding: `0 1.0875rem 1.45rem`,\n        }}\n      >\n        <Nav />\n        <main>{children}</main>\n        <footer style={{ marginTop: \"1rem\" }}>\n          © {new Date().getFullYear()}, kyoune01\n        </footer>\n      </div>\n    </>\n  )\n}\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({ description, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaTitle =\n    title === \"\"\n      ? site.siteMetadata.title\n      : `${title} | ${site.siteMetadata.title}`\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <>\n      <title>{metaTitle}</title>\n      <meta name=\"description\" content={metaDescription} />\n      <meta property=\"og:title\" content={metaTitle} />\n      <meta property=\"og:description\" content={metaDescription} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta name=\"twitter:card\" content=\"summary_large_image\" />\n      <meta name=\"twitter:creator\" content={site.siteMetadata?.author || ``} />\n      <meta name=\"twitter:title\" content={metaTitle} />\n      <meta name=\"twitter:description\" content={metaDescription} />\n    </>\n  )\n}\n\nSEO.defaultProps = {\n  description: ``,\n  title: \"\",\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  title: PropTypes.string,\n}\n\nexport default SEO\n"],"names":["_ref","_data$markdownRemark","_data$markdownRemark$","_data$markdownRemark$2","_data$markdownRemark2","data","React","Layout","className","style","marginBottom","markdownRemark","frontmatter","title","dangerouslySetInnerHTML","__html","html","Head","_ref2","_data$markdownRemark3","_data$markdownRemark4","SEO","Header","siteTitle","background","margin","maxWidth","padding","Link","to","color","textDecoration","defaultProps","Nav","width","display","alignItems","listStyle","children","useStaticQuery","site","siteMetadata","marginTop","Date","getFullYear","_site$siteMetadata","description","metaTitle","metaDescription","name","content","property","author"],"sourceRoot":""}